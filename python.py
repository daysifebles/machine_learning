# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-jast8_Z1PK_gvUMnwOc3k784BYUXlj9

# Listas

valores o items separados por comas entre corchetes. Puede contener items de diferentes tipos, pero usualmente todos sus items son del mismo tipo.
"""

squares = [1,4,9,16,25]
squares

#acceder a los elementos de la lista
squares[0] #valor en la primera posición

squares[3]

squares[-1] #valor de la última posición

squares[-3:] #corta la lista y retorna una nueva lista

squares[:] #retorna una copia de la lista original

# Concatenación
squares + [36,49,64,81,100]

#Cambiar un valor o varios
squares[1] = 16
squares

squares[2:4] = [1,0] # no toma en cuenta la última posición
squares

#remover un elemento o todos los elementos de la lista
squares[0:1] = []
squares

squares[:] = []
squares

lista = [1,'dos',3.2,5]
lista

"""Es posible crear listas que contienen otras listas"""

a = ['a', 'b', 'c']
n = [1, 2, 3]

x = [a, n]
x

x[0] #acceder a la primera lista

x[0][1] #acceder a un elemento de la primera lista

"""### `append(x)`

Agregar un item al final de la lista.
"""

lista.append('x') 
lista
#equivalente a lista[len(lista):]=['x']

"""### `extend(iterable)`

Extiende la lista agregando todos los elementos que se le agregen en el argumento iterable.
"""

lista.extend([1,2])
lista
#equivalente a lista[len(lista):]=['x']

"""### `insert(i,x)`

Inserta un item en la posición dada. El primer argumento corresponde al índice del elemento donde se va a insertar el item.
"""

lista.insert(1,'a')
lista
#lista.insert(len(lista),'a') es equivalente a lista.append('a')

"""### `remove(x)`
Eliminia el primer item de la lista que es igual a el argumento x, y devuelve `ValueError` si no hay items iguales a dicho valor.
"""

lista.remove('a') 
lista

"""### `pop(i)`

Elimina el item de la posición dada y devuelve dicho valor. Si no se específica la posición elimina y devuelve el último item de la lista.
"""

lista.pop(2)
lista

"""### `clear()`

Elimina todos los items de la lista.
"""

lista.clear()
lista
#equivalente a del lista[:]

"""### `index(x[,start[,end]])`

Devuelve el índice basado en cero de la lista cuyo primer valor es igual a x, devuelve un ValueError si no se encutra dicho valor. Los argumentos start y end son opcionales y se usan para limitar la busqueda en una subsecuencia de la lista.
"""

lista = [1,'dos',3.2,5]
lista.index('dos')

"""### `count(x)`

Revuelve el número de veces que se encuentra el elemento x en la lista.
"""

lista.count('dos')

"""### `sort(key=None, reverse=False)`

ordena los items de la lista.
"""

lista1 = [1,5,8,9,63.2,52.1,47.2]
lista1.sort()
lista1

"""### `reverse()`
Devuelve los elementos de la lista en forma reversa.
"""

lista.reverse()
lista

"""### `copy()`

Devuelve una copia superficial de la lista.
"""

lista2 = lista.copy()
lista2

"""### `len()`

Retorna el tamaño de la lista.
"""

len(lista)

"""### `max()` and `min()`

Retorna el valor máximo y mínimo respectivamente de una lista númerica.
"""

max(n)

min(n)

"""### Ejemplos con listas"""

fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']
fruits
#cuántas veces aparece 'apple en la lista'
fruits.count('apple')
#En qué indice se encuentra 'banana'
fruits.index('banana')
#Encuentre el indice después de la posicion 4 que se encuentre 'banana'
fruits.index('banana',4)
#Colocar en forma reversa la lista fruits
fruits.reverse()
fruits
#Agregar en la última posición 'grape'
fruits.append('grape')
fruits
#Ordenar los elementos de la lista
fruits.sort()
fruits
#Eliminar el último item de la lista fruits
fruits.pop()
fruits

stack = [3, 4, 5]
#Agregar el número 6
stack.append(6)
#Agregar el número 7
stack.append(7)
stack

stack.pop()
stack.pop()
stack.pop()
stack

"""## Compresión de Listas

Proporcionan un camino conciso para crear listas. Los elementos de la lista son el resultado de alguna operación aplicada de otra secuencia o iteración, o para crear una secuencia de esos elementos que satisfacen una cierta condición.
"""

cuadrados = []
for x in range(10):
  cuadrados.append(x**2)

cuadrados

cuadrado = list((map(lambda x: x**2, range(10))))
cuadrado

cuad =  [x**2 for x in range(10)]
cuad

[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]

vec = [-4, -2, 0, 2, 4]
[x*2 for x in vec]

"""# Expresión `lambda`

Puede tener cualquier número de argumentos, pero solamente puede tener una expresión.

`lambda argumentos : expresión`
"""

x = lambda a : a+10
x(5)

y = lambda a, b : a * b
y(2,5)

(lambda x: x + 1)(2)

"""# Funciones

Como ejemplo se creara la función de Fibonacci, recordemos que es una serie que comienza con 0 y 1 y los números siguientes son la suma de los dos anteriores.

0, 1, 1, 2, 3, 5, 8, 13, 21 ...
"""

#n será el número de parada
def fibonacci(n):
  a,b =0,1 #valores iniciales de la serie de fibonacci
  while a <= n:
    print(a, end=' ')
    a, b = b, a+b

fibonacci(2000)

#vamos a retornar la serie en una lista
def fibonacci_lista(n):
  resultado = [] #inicializar la lista
  a,b =0,1 #valores iniciales de la serie de fibonacci
  while a <= n:
    resultado.append(a)
    # resultado = resultado + [a] # es equivalente a lo anterior
    a, b = b, a+b
  return resultado

fibonacci_lista(2000)

"""# Diccionario

Son memorias o matrices asociativas. Son indexados por llaves (keys).
"""

#diccionario = { clave1 : valor1, clave2 : valor2, ...}
tel = { 'jack' : 4098, 'sape' : 4139}

#Agregar una clave nueva
tel['guido'] = 2147
tel['irv'] = 4127
tel

# El valor de una clave
tel['jack']

#Borrar una key:value
del tel['sape']
tel

#Para retornar todas las llaves, keys o claves
list(tel)
sorted(tel) # este también los ordena

#para verificar si una key está en el diccionario
'guido' in tel
'jack' not in tel

# otra forma de definir un diccionario, por pares de keys-value
dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])

{x: x**2 for x in (2, 4, 6)}

dict(sape=4139, guido=4127, jack=4098)

"""# Grupos, conjuntos o sets

Un conjunto es una colección desordenada sin elementos duplicados. Soportan operaciones matemáticas como unión, intersección, diferencia y diferencia simétrica.
"""

basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
basket

a = {x for x in 'abracadabra' if x not in 'abc'}
a

# para crear un conjunto vacio se debe usar set() no {} porque crea un diccionario bacio.

# ver si un elemento está en el conjunto
'orange' in basket

#Operaciones entre conjuntos
x = set('abracadabra')
y = set('alacazam')

# ver los elementos unicos de un conjunto
x

#Diferencia entre conjuntos
x-y #están en x pero no en y

#Unión de conjuntos
x | y

#Intersección de conjuntos
x & y

#Elementos de ambos conjuntos menos los comunes entre ellos
x ^ y

"""# Ciclo `for`

Ietración sobre una progresión aritmética de números, tiene la capacidad de definir el paso de iteración como la condición de parada.
Itera sobre los elementos de una secuencia, que puede ser cadena, lista o tupla, en el orden que aparecen.
"""

for w in [1,2,3]:
    print(w, 'hi')

words = ['cat','window','defenestrate']
for w in words:
  print(w, len(w))

for item in basket:
  print(item)

for i in range(0,3):
  print(i)

for a,b in [(1,2),(3,4)]:
  print(a,b+a)

"""# Declaración `if`

Retorna un valor si se cumple una condición o otro si este no se cumple.

Dentro de las condiciones podemos encontrar:

`>=` mayor igual.

`<=` menor igual.

`==` igual.

`!=` diferente.

`and` Y, ambas condiciones se cumplen.

`or`  O, suficiente que una se cumpla.
"""

if 3<2 :
  print('hello')
else:
  print('la condición no es verdadera')

age = 29
if age<13:
  print('you are young')
elif age>=13 and age<18 : #else if
  print('you are teenager')
else:
  print('you are adult')

"""# Formateo de Cadenas

Cuando a una cadena queremos agregar un número y queremos que retorne una cadena. Para que el número se convierta en tipo cada se unas `%`.

`%s` denota una cadena. Si dicho valor no es una cadena este automaticamente lo cambia con la función `str()`.

`%d` denota un entero de base 10.

`%f` un número flotante. `%.2f` indica que son dos números después de la coma, dos decimales.

`%%` si se quiere incluir el `%` en el texto.

`%x` números hexadecimales.
"""

import math

print('The value of pi is approximately %5.3f.' % math.pi)

#Otra forma de hacerlo usando str()
nombre='Juany'
edad=20
"Tu nombre es " + nombre + " y tienes " + str(edad) + " años."

"Tu nombre es %s" % nombre

"""# Tipos de Datos

## Números

Se pueden realizar operaciones con números igual que una calculadora. Las operaciones con las que trabaja son  `+`, `-`, `*`, `**`, `/`, `//` y `%`.
"""

2+2

50 -5*7

(60+7*9)/4

8/4

17//3 #descarta la parte decimal

17%3 # devuelve el residuo

5 ** 2 # potencia de un número

5**(1/2)
math.sqrt(5) #raíz cuadrada

3+5J #números complejos

str(25) #convertir números en string

"""## Strings, cadena de carácter

Se colocan entre `'...'` o `"..."`.
"""

'spam eggs'

'doesn\'t' # para imprimir '

"doesn't"

'"Yes," they said.'

"\"Yes,\" they said." #para imprimir las comillas

'"Isn\'t," they said.'

#Usando la función print() para mostrar caracteres
print('"Isn\'t," they said.')

s = 'spam eggs\n hola' #\n salto de línea
s
print(s)

print('C:\some\name') # muestra el salto de linea de \n
print(r'C:\some\name') #no toma en cuenta el salto de línea

#Para mostrar multiples líneas con print(), se usa """... """ o '''... '''
print("""\
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
""")

3 * 'un' + 'ium' #se concatena con + y se replica con *

'Py' 'thon' # se concatenan

#Para concatenar texto guardado en variables se debe hacer con +
prefix = 'Pyt'
prefix + 'hon'

#acceder a los elementos de una cadena
prefix[0]
prefix[1]
prefix[2]
prefix[-1] #último carácter
prefix[0:2] #no toma la última posición
prefix[:2]
prefix[2:]
prefix[-2:]

# Las cadenas de caracteres en python no son inmutables, es decir no se pueden cambiar.
#prefix[0] = 'K'

len(prefix) #tamaño de la cadena

"""## float"""

float(10)

float(11.22)

float('-13.33') #convierte un carácter en un flotante

float("     -24.45\n")

#float("abc") #no se puede convertir en un flotante

"""## bool

Retorna falso si el valor que se omite es falso, y verdadero si dicho valor es verdadero
"""

#Los elementos nulos o vacíos se condideran False
bool(0)
bool(0.0)
bool("")
bool([])
bool({})
#El resto se consideran True
bool(25)
bool('abc')
bool((1,2,3))
bool([27, "octubre", 1997])

#Operadores lógicos
## and
True and True #True
True and False #False
False and True #False
False and False #True
## or (sólo puede darse una de las dos alternativas)
True or True #True
True or False #True
False or True #True
False or False #False
## Negación
not True # False
not False # True

4 == 3 + 1  and 3 + 1 > 2

"""Función `type()` paa conocer que tipo de dato es el objeto que pasamos dentro de ella."""

type(10.0) # Float

type(10) # Entero

type('a') # Carácter

"""# Declaración `pass`

No hace nada, se usa cuando la declaración se requiere sistematicamente pero el programa no requiere una acción.
"""

for letter in 'Python': 
   if letter == 'h':
      pass
      print('This is pass block')
   print('Current Letter :', letter)

"""# Para saber la versión de Python"""

#Para saber la versión de Python que usas
import sys
print(sys.version)