# -*- coding: utf-8 -*-
"""NumPy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LxvkTQ-1Ircj7R0wzD7UacDjhr7yv18Y

# NumPy

Tabla de elementos (usualmente números), todos del mismo tipo, indexados por una tupla de enteros no negativos. En NumPy las dimensiones son llamadas axes, por ejemplo la coordenada de un punto en 3D `[1,2,1]` es un axe de tamaño 3.
"""

import numpy as np

"""### Arrays"""

#Creación de Array 
#Se deben de colocar dentro de [].
b = np.array([(1.5,2,3), (4,5,6)])
b

# se le puede especificar el tipo de dato
c = np.array( [ [1,2], [3,4] ], dtype=complex )
c

a = np.array([[1,2,3],[1.2, 3.5, 5.1]])
a

# Número de axes que contiene el array
a.ndim

# Dimensiones del array, tamaño del array en cada dimensión, en una matriz (n,m)
a.shape

# Total de número que contiene el array
a.size

# Describe el tipo de elementos que contiene el array, int32, int16,float64
a.dtype

# Tamaño en bytes de cada elemento del array.  De tipo float64 tiene 8 (=64/8)
a.itemsize

"""### Función `zeros()`

Crea un array con solo valores nulos de tipo flotante.
"""

np.zeros(shape=(3,4))

"""### Función `ones()`

Crea un arreglo de puros unos.
"""

np.ones( (2,3,4), dtype=np.int16 )

"""### Función `empty()`

Crea un arreglo con valores aleatorios.
"""

np.empty( (2,3) )

"""### Función `arange()` 

Crean secuencias de números, es el equivalente a la función `range()` de Python.
"""

#al igual que range no toma en cuenta el valor de parada. [star,stop)
np.arange(0,5,0.1)
#star,stop,step

np.arange(6) #por defecto toma el paso de tamaño 1 y el valor como el stop

np.arange(12).reshape(4,3) 
np.arange(24).reshape(2,3,4)

"""## Operaciones Básicas"""

#secuencia de números
np.linspace(0,np.pi,10)
#star,stop, cantidad de números

a1 = np.array([0,1,2,3,4])
a2 = np.arange(4,9)
a3 = np.array([[1,1],[2,3]])
a4 = np.array([[2,2],[0,1]])
a5 = np.array([3,2])

#Resta
a1,a2,a1-a2 #se restan elemento a elemento

#Suma 
a1+a2

#Multiplicación escalar y aplicación de funciones.
10*np.sin(a1)

a2>5

#Multiplicación elemento a elemento
a3 * a4

a1 += a2 #convierte a1 en a2
a1 *= 2 #Multiplica todos los valores de a1 por 2
a1

#Suma de todos los elementos de un array
a1.sum()

#Mínimo de un array
a1.min()

#Máximo de un array
a1.max()

#Suma acumulativa
a3.cumsum()

"""## Operaciones Algebraicas"""

a3, a4

#Multiplicación de matrices
a3@a4
a3.dot(a4)

#Traspuesta de una matriz
a3.transpose()

#Inversa de una matriz
np.linalg.inv(a3)

#Matriz identidad
np.eye(4)

#Traza de una matriz
np.trace(a3)

#Solución de ecuación lineal
a = np.array([[1, 2], [3, 4]])
y = np.array([[5], [7]])
np.linalg.solve(a, y)

j = np.array([[0.0, -1.0], [1.0, 0.0]])
np.linalg.eig(j)